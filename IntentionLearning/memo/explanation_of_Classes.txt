**マーク付きは廃版。もう使わない
→マークは継承関係。

[komota.coordinate]
	MyCoordinate
		座標系クラス。変換と逆変換ができるだけ
	Coordinate_ID (→MyCoordinate)
		恒等写像を行う、つまり何もしない座標系。MyCoordinateのメソッドをオーバーライドしないで使ったら恒等写像になるのだが、混乱しないようにわざわざ作った。
	Coordinate_LT (→MyCoordinate)
		ランドマーク_トラジェクタ座標系(ランドマークから見て、トラジェクタの方向を軸とする座標系)
	Coordinate_GL (→MyCoordinate)
		重心_ランドマーク座標系(重心から見て、ランドマークの向きを軸とする座標系)
	[使用法]
		どの変換も引数にベクトル配列を渡す。
		IDはinputs[0]に被変換ベクトルを入れればあとは何が入っていてもOK。返り値は被変換ベクトルをそのまま返す
		LTはinputs[0]に被変換ベクトル、inputs[1]にランドマーク（参照点）ベクトル、inputs[2]に移動前のトラジェクタベクトルを入れる。
		GLはinputs[0]に被変換ベクトル、inputs[1]に重心のベクトル、inputs[2]にランドマーク（オブジェクト）ベクトルを入れる。
[komota.main]
	** MainFrame
		大元のフレームクラスだったもの。現在はMyFrameを使用してるためもう使わない
	MyFrame
		大元のフレームクラス。これを継承すると離散空間のシミュレータになる。NUMBEROFPANEL定数はよくいじる
	** MyFramewithObject
		擬似連続空間シミュレータ試作版。余計な構築にしすぎたため廃版
	MyPanel
		MyFrame上に配置される各パネルのクラス。今思えば別にMyFrameの内部クラスでもよかったしその方が定数とかバラバラにならなくてよかったかも
	MyPR
		パターン認識クラスの親クラス。このクラスではログデータを読み取って扱いやすいStepLog内部クラスに変換するだけ
		[コンストラクタ説明]
			MyPR(String filename)
				filenameに指定されたテキストファイルのログデータを、扱いやすいStepLogインスタンスに変換する
			MyPR()
				test4.txt を用いる
		[メソッド説明]
			close()
				BufferedReaderをcloseする
			setNumberofEvaluation(int num)
				evaluateの実行時にログデータから使用するstart,goalセットの数の上限を変更する。
				使用するデータの量によって学習精度に差が生じるかの確認ができる
			getNumberofEvaluation()
				データ使用量のゲッター。インクリメントさせたい時などに使用する
			show()
				ログデータがきちんとStepLogインスタンスに変換できているか、標準出力させて確認する。
				主に開発初期に使用していたもので、現在は特に必要としていない
			arrangeField(MyFrame frame , StepLog log)
				シミュレータの状態を、引数で与えたログデータの状態にする。
				evaluateで各学習結果に応じて再現誤差を求める際に、各初期状態を再現する必要があったため作成。デモ作る時とかに何かと便利そう。
			learnfromLog()
				パターン認識の主の部分。ここに各PRごとの処理を書く。親クラスであるMyPRでは白紙のメソッド。
			reproduction()
				学習結果をもとにトラジェクタの移動先を再現する。
				親クラスにまとめてしまってよい気もするが、現在子クラスごとに生成するReferenceの形態が微妙に異なるため、各子クラスで実装する形をとっている。あんまりよくない
			initialize()
				学習結果(各ReferencePointのgoalpointとlikelihoodとnumberoflearning)を初期化する。
				evaluateで学習とテストを繰り返す際に必要。
				同上の理由により各子クラスで実装。あんまりよくない
			evaluate(MyFrame frame)
				これもこのクラスの主の部分。クロスバリデーションを行い、学習精度を求める。
	MySerialFrame (→MyFrame)
		擬似連続空間シミュレータ。オブジェクトがクリックしやすくなった。これを継承すると擬似連続空間のシミュレータになる。NUMBEROFPANELはMyFrameのものを使用してるため注意
	SampleDemo2015**** (→MyFrame or MySerialFrame)
		主に先生に見せるもの。画像とか使って見栄えよくしてある
	SampleQuestionnaire* (→MyFrame or MySerialFrame)
		紙芝居風のアンケートフォーム。めちゃくちゃ出来はいいが使い道がなくなってしまったため、今は使わない。いつか(遊びで)使いたい
	SampleTask_*** (→MyFrame)
		ある一定の成果を上げたもの。sなしは離散空間(MyFrame)で実装したもの
		000 :研究目標１の最初期のもの。単体オブジェクトと画面中央のみを参照点とした離散空間シミュレータで、それなりに動いている
		001 :研究目標１の粗案をそのまま実装したもの。なんかよくできちゃってる
	SampleTask_***s (→MySerialFrame)
		ある一定の成果を上げたもの。sありは擬似連続空間(MySerialFrame)で実装したもの
		001s :001をそのまま擬似連続空間に適用したもの。ファジーさを取り入れてよりそれっぽくなった
		002s :Coordinateを採用し、座標変換を行えるようになったもの。
		003s :001と002を統合したもの。複数のPRを持たせ、最大のlikelihoodを比較することによって実現
		004s :重心＿ランドマーク座標系を実装したもの
		005s :評価メソッドを実装したもの
	SampleTask*_*(s) (→MyFrame or MySerialFrame)
		製作中のもの。一文字目の数字は完成時のクラスに割り振られる数字で、ハイフン後の数字はバージョン
		6_*系 :研究目標３のための試作。タスク的視野を実装したもの
		7_*系 :参照点の学習に、単純平均でなく正規分布を使用し、更新を行わせる試作。005シリーズを継承しているため、6_*系と互換性がない
				→単体ガウスを使用する場合、平均ベクトルはサンプル平均に一致するらしい。つまり今までの実装と同じになる。
				変わることといえばlikelihoodの計算で、ここは単純な分散値ではなく、各ベクトルの生起確率に基づく分散値にするべきである
	** SampleTask* (→MainFrame)
		MainFrameの動作確認も含めた最初期のサンプルクラス。もう不要。
[komota.pr]
	** TestPatternRecognition
		MainFrameで使用されていたパターン認識。後生のMyPRはkomota.mainにおかれているため正直このパッケージごといらない
[komota.pr.main]
	PR_*** (→MyPR)
		MyPRで読み込まれたログデータをもとに実際に認識を行うクラス。番号はSampleTask_***と対応している
		000 :単体オブジェクトと画面中央のみを参照点とする
		001 :重心位置も参照点とする。オブジェクトは最大9個まで
		002 :ランドマーク_トラジェクタ変換を行った位置で学習する。
	PR_***_** (→PR_*** →MyPR)
		PR_***に対して、座標系**を設定したもの。基本的に各パターン認識クラスに対して一つずつ座標系が設定される。
		でも今考えたらPR_***でセッターを作って座標系をセットできるようにすればいいだけなので、このテンプレートは使わないほうがよさそう。
[komota.pr.test]
	PR_*_* (→MyPR)
		試作版。これもSampleTask_*_*と対応している。実際この辺のパッケージ分けは混乱のもととなるだけな気がする
[komota.supers]
		もともとはMyFrameやMyPRなど、おおもとの親クラスをまとめて入れておくところにしようと思ったが、スコープの関係ですこぶる面倒だったため断念。ただのからパッケージ。消せよ
[komota.test]
		自由にテストに使っていい所。ここのものを外部から参照してはいけない。（ゴミ箱と同じところだから）
	** JTextFieldTest
		JConponentを用いてテキスト入力フォームを表示するテスト。初めてだったのでただ動きを確認するためだけのもの